#' Cluster/Region Colocalization
#'
#' Visualizes the signal intensity distribution of a selected compound with an overlay indicating a specified cluster obtained from
#' spatial segmentation results. Some underlying information is required, such as the morphological region represented by the chosen
#' cluster. This function is designed to accept a range of inputs but relies on user-based curation and region assignment of segmentation
#' results.
#'
#' @param df Normalized data matrix containing cluster, sample ID, pixel coordinate, and pixel intensity information.
#' @param md Number of metadata columns present in input data.
#' @param samp.no Numeric sample ID.
#' @param list.cols Numeric IDs indicating the column numbers of compounds to be visualized.
#' @param name.region User supplied name of morphological region represented by the chosen cluster ID
#' @param region.clus.no Numeric cluster ID.
#' @param md Numeric sample ID.
#' @param no.c Number of palette colors to be used (equal to the number of compound ion images to be plotted).
#' @return A panel of ion images with cluster ID overlays for examining compound colocalization within distinct morphological regions in each sample.
#' @examples
#' # Create plots and save (requires input data frame with segmented clusters from previous step)
#' p.mark <- MSI.plot.coloc(
#'   # input data
#'   d,
#'   # number of metadata columns using for input
#'   6,
#'   # sample (ID) number
#'   1,
#'   # list of input data columns to include (by number)
#'   c(
#'     2:5,49:50,53,55
#'   ),
#'   # user-defined region name
#'   "Alveolar Epithelium",
#'   # cluster number of selected region (for selected sample)
#'   3,
#'   # number of colors from palette to use
#'   5
#' )
#'
#' @export
MSI.plot.coloc <- function(
    df,
    md,
    samp.no,
    list.cols,
    name.region,
    region.clus.no,
    no.c
    ) {
  ## select sample and columns
  d1 <- df[
    df[["ID"]] == samp.no,
    list.cols
    ]
  ## melt by compound name
  d1[["cluster.int"]] <- ifelse(
    d1[["Cluster"]] == region.clus.no,
    1,
    0
    )
  d1 <- reshape2::melt(
    d1,
    id.vars = 1:4
    )
  d1[["Cluster"]] <- ifelse(
    d1[["Cluster"]] == region.clus.no,
    name.region,
    "Blank"
    )
  ## plot cluster
  p <- ggplot2::ggplot() +
    ggplot2::geom_raster(
      data = d1[d1[["variable"]] == "cluster.int",],
      ggplot2::aes(
        x = X,
        y = Y,
        fill = as.factor(.data[["value"]])
        ),
      interpolate = T,
      show.legend = F,
      alpha = ifelse(
        d1[d1[["variable"]] == "cluster.int",][["value"]] == 1,
        1,
        0
        )
      ) +
    Regio.theme2() +
    ggplot2::scale_y_reverse(
      limits = c(
        max(df[["Y"]]
        ),
        1
        )
      ) +
    ggplot2::scale_x_continuous(
      limits = c(
        1,
        max(
          df[["Y"]]
          )
        )
      ) +
    ggplot2::scale_fill_manual(
      values = c(Regio.col.univ()[[no.c]],"white")
    )
  ## Plot images with cluster overlay
  p2 <- setNames(
    lapply(
      unique(
        as.character(
          d1[["variable"]]
          )
        ),
      function(x)
        {
        ggplot2::ggplot() +
          ggplot2::geom_raster(
            data = d1[d1[["variable"]] == x,],
            ggplot2::aes(
              x = X,
              y = Y,
              fill = .data[["value"]]
              ),
            interpolate = T,
            show.legend = F
            ) +
          ggplot2::scale_fill_gradientn(
            colors = Regio.col.grad(),
            limits = c(
              0,
              quantile(
                d1[d1[["variable"]] == x,
                   ][["value"]],
                0.99
                )
              ),
            na.value = Regio.col.grad()[[12]]
            ) +
          ggnewscale::new_scale_fill() +
          ggplot2::geom_raster(
            data = d1[d1[["variable"]] == "cluster.int",],
            ggplot2::aes(
              x = X,
              y = Y,
              fill = as.factor(.data[["value"]])
              ),
            interpolate = T,
            show.legend = F,
            alpha = ifelse(
              d1[d1[["variable"]] == "cluster.int",][["value"]] == 1,
              0.5,
              0
              )
            ) +
          Regio.theme2() +
          ggplot2::scale_y_reverse(
            limits = c(
              max(df[["Y"]]
              ),
              1
              )
            ) +
          ggplot2::scale_x_continuous(
            limits = c(
              1,
              max(
                df[["Y"]]
                )
              )
            ) +
          ggplot2::scale_fill_manual(
            values = c(Regio.col.univ()[[no.c]],"white")
            ) +
          ggplot2::theme(plot.margin = grid::unit(
            c(0.1,0.1,0.1,0.1),
            "cm"
            ),
          legend.position = "none"
          )
        }
      ),
    c(
      unique(
        as.character(
          d1[["variable"]]
          )
        )
      )
    )
  ## combine and output
  p3 <- c(
    list(
      name.region= p
      ),
    p2[-length(p2)]
    )

  return(p3)
  }







