#### Intrasample processing of MSI data (based on Cardinal) ####

#---- Peak Detection ----

MSI.detectpeaks <- function(
    msi.list,
    p.list,
    parl){
  list.d <- msi.list
  list.p <- p.list

  # Parallelization parameters
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::MulticoreParam(
        workers = floor(
          parallel::detectCores()/4
          ),
        progressbar = T
      )
    )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
    print("Detected OS is Windows; Defaulting to serial processing...")
  }
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
      )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
  }

  # Processing parameters

  ifelse(
    sum(
      unlist(
        lapply(
          list.d,
          function(x) nrow(
            Cardinal::coord(x)
          )
        )
      )
    )/
      100 <
      2000,
    n.chunk <- 100,
    ifelse(
      sum(
        unlist(
          lapply(
            list.d,
            function(x)
              nrow(
                Cardinal::coord(x)
              )
          )
        )
      )/
        1000 <
        2000,
      n.chunk <- 1000,
      n.chunk <- 10000
    )
  )

  Cardinal::setCardinalNumBlocks(
    n = n.chunk
  )

  ### Align spectra (for every pixel), filter missing or low intensity peaks
  ### (<0.5% detected across all pixels; roughly equivalent to a peak that is detected in 10% of pixels in an individual image for
  ### a dataset that includes 12 separate images)
  ### Generates list of aligned m/z peaks detected for all samples
  ### Use this output as a reference peak list for binning profile spectra to a single centroided spectra suitable for comparing across samples
  ### Then normalize the binned spectra by sparse LOESS (sLOESS) correct for differences in intensity across sample run

  ### Combine MSI data and perform peak detection
  n.freq <- (((sum(
    unlist(
      lapply(
        list.d,
        function(x) nrow(
          Cardinal::coord(x)
        )
      )
    )
  )/
    length(
      list.d
    )))*0.1)/(
      sum(
        unlist(
          lapply(
            list.d,
            function(x) nrow(
              Cardinal::coord(x)
            )
          )
        )
      )
    )

  d <- do.call(
    Cardinal::cbind,
    list.d
    )

  d.peaks <- Cardinal::process(
    Cardinal::peakFilter(
      Cardinal::process(
        Cardinal::peakAlign(
          d,
          tolerance = list.p[["resolution"]],
          units = "ppm"
          )
      ),
      freq.min = n.freq
    )
  )

  return(
    list(
      "Processed.Peaks" = d.peaks,
      "Processing.Details" = data.frame(
        "Parallel.settings" = Cardinal::getCardinalBPPARAM(),
        "Code.blocks" = Cardinal::getCardinalNumBlocks(),
        "Processing.time" = proc.time()
        )
      )
    )

  }




