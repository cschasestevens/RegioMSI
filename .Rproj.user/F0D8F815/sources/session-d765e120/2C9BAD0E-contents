#### Peak binning of MSI data (Cardinal R) ####

MSI.binpeaks <- function(
  samp.list,
  data.list,
  pk.list
  ){

  d.peaks <- pk.list
  list.s <- samp.list
  list.d <- data.list

  gc(reset = T)

  # Parallelization parameters
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::MulticoreParam(
        workers = floor(
          parallel::detectCores()/2
        ),
        progressbar = T
      )
    )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
    BiocParallel::SnowParam(
      workers = floor(
        parallel::detectCores()/2
        ),
      progressbar = T
      )
    )
    print("Warning: Parallel processing in Windows may be unstable; Switch parallel processing to FALSE upon a processing error.")
  }
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
  }

  # Processing parameters
  ifelse(
    sum(
      unlist(
        lapply(
          list.d,
          function(x) nrow(
            Cardinal::coord(x)
          )
        )
      )
    )/
      100 <
      2000,
    n.chunk <- 100,
    ifelse(
      sum(
        unlist(
          lapply(
            list.d,
            function(x)
              nrow(
                Cardinal::coord(x)
              )
          )
        )
      )/
        1000 <
        2000,
      n.chunk <- 1000,
      n.chunk <- 10000
    )
  )

  Cardinal::setCardinalNumBlocks(
    n = n.chunk
  )





  ### Binning ###
  #### Divide into batches of 3 samples then concatenate to conserve memory
  n.batch <- ceiling(
    length(
      list.s[["ID"]]
    )/3
  )
  #### 4 batches
  if(
    n.batch == 4
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
          ),
        "samples present: dividing binning into 4 batches...",
        sep = " "
        )
      )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

    # Batch 3
    d.proc3 <- setNames(
      lapply(
        seq.int(
          7,9,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][7:9]
      )
    )
    ## output stats
    proc.time()
    d.proc3
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc3,
      file = "2.2.processed.b3.rds"
    )
    # Reset memory
    remove(d.proc3)
    gc(reset = T)

    # Batch 4
    d.proc4 <- setNames(
      lapply(
        seq.int(
          10,
          length(
            list.s[["ID"]]
          ),
          1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][10:
                                   length(
                                     list.s[["ID"]]
                                   )
        ]
      )
    )
    ## output stats
    proc.time()
    d.proc4
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc4,
      file = "2.2.processed.b4.rds"
    )
    # Reset memory
    remove(d.proc4)
    gc(reset = T)

  }


  #### 3 batches
  if(
    n.batch == 3
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: dividing binning into 3 batches...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

    # Batch 3
    d.proc3 <- setNames(
      lapply(
        seq.int(
          7,9,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][7:9]
      )
    )
    ## output stats
    proc.time()
    d.proc3
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc3,
      file = "2.2.processed.b3.rds"
    )
    # Reset memory
    remove(d.proc3)
    gc(reset = T)

  }


  #### 2 batches
  if(
    n.batch == 2
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: dividing binning into 2 batches...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

  }


  #### 1 batch
  if(
    n.batch == 1
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: binning will be completed as a single batch file...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,length(
            list.s[["ID"]]
          ),1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          d.p <- process(
            peakBin(
              list.d[[x]],
              ref = mz(
                d.peaks
              ),
              type = "height"
            )
          )
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:length(
          list.s[["ID"]]
        )]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    getCardinalBPPARAM()
    getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

  }

  print("All samples have been successfully binned! The binned results are included in the .rds batch files...")
  }




