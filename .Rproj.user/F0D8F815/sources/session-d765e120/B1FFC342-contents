#### Peak binning of MSI data (Cardinal R) ####

MSI.bin




#---- Peak binning ----
getCardinalNumBlocks()
ifelse(
  sum(
    unlist(
      lapply(
        list.d,
        function(x) nrow(
          coord(x)
        )
      )
    )
  )/
    100 <
    2000,
  n.chunk <- 100,
  ifelse(
    sum(
      unlist(
        lapply(
          list.d,
          function(x)
            nrow(
              coord(x)
            )
        )
      )
    )/
      1000 <
      2000,
    n.chunk <- 1000,
    n.chunk <- 10000
  )
)

setCardinalNumBlocks(
  n = n.chunk
)
getCardinalNumBlocks()

n.freq <- (((sum(
  unlist(
    lapply(
      list.d,
      function(x) nrow(
        coord(x)
      )
    )
  )
)/
  length(
    list.d
  )))*0.1)/(
    sum(
      unlist(
        lapply(
          list.d,
          function(x) nrow(
            coord(x)
          )
        )
      )
    )
  )


## Perform peak binning to convert profile spectra to centroid
## Requires successful peak alignment from previous section
getCardinalBPPARAM()
if(Sys.info()[["sysname"]] != "Windows") {

  setCardinalBPPARAM(
    MulticoreParam(
      workers = 18,
      progressbar = T
      )
    )
  }

if(Sys.info()[["sysname"]] == "Windows") {

  setCardinalBPPARAM(
    SnowParam(
      workers = 4,
      progressbar = T
      )
    )
  }

getCardinalBPPARAM()
getCardinalNumBlocks()
proc.time()


### Bin
#### Divide into batches of 3 samples then concatenate to conserve memory
n.batch <- ceiling(
  length(
    list.s[["ID"]]
    )/3
  )



#### 4 batches
if(
  n.batch == 4
  ){
  # Batch 1
  d.proc1 <- setNames(
    lapply(
      seq.int(
        1,3,1
        ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][1:3]
    )
  )
  ## output stats
  proc.time()
  d.proc1
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc1,
    file = "processing/2.2.processed.b1.rds"
  )
  # Reset memory
  remove(d.proc1)
  gc(reset = T)

  # Batch 2
  d.proc2 <- setNames(
    lapply(
      seq.int(
        4,6,1
        ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][4:6]
    )
  )
  ## output stats
  proc.time()
  d.proc2
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc2,
    file = "processing/2.2.processed.b2.rds"
  )
  # Reset memory
  remove(d.proc2)
  gc(reset = T)

  # Batch 3
  d.proc3 <- setNames(
    lapply(
      seq.int(
        7,9,1
        ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][7:9]
    )
  )
  ## output stats
  proc.time()
  d.proc3
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc3,
    file = "processing/2.2.processed.b3.rds"
  )
  # Reset memory
  remove(d.proc3)
  gc(reset = T)

  # Batch 4
  d.proc4 <- setNames(
    lapply(
      seq.int(
        10,
        length(
          list.s[["ID"]]
          ),
        1
        ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][10:
                                 length(
                                   list.s[["ID"]]
                                   )
                               ]
    )
  )
  ## output stats
  proc.time()
  d.proc4
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc4,
    file = "processing/2.2.processed.b4.rds"
  )
  # Reset memory
  remove(d.proc4)
  gc(reset = T)

  }


#### 3 batches
if(
  n.batch == 3
){
  # Batch 1
  d.proc1 <- setNames(
    lapply(
      seq.int(
        1,3,1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][1:3]
    )
  )
  ## output stats
  proc.time()
  d.proc1
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc1,
    file = "processing/2.2.processed.b1.rds"
  )
  # Reset memory
  remove(d.proc1)
  gc(reset = T)

  # Batch 2
  d.proc2 <- setNames(
    lapply(
      seq.int(
        4,6,1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][4:6]
    )
  )
  ## output stats
  proc.time()
  d.proc2
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc2,
    file = "processing/2.2.processed.b2.rds"
  )
  # Reset memory
  remove(d.proc2)
  gc(reset = T)

  # Batch 3
  d.proc3 <- setNames(
    lapply(
      seq.int(
        7,9,1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][7:9]
    )
  )
  ## output stats
  proc.time()
  d.proc3
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc3,
    file = "processing/2.2.processed.b3.rds"
  )
  # Reset memory
  remove(d.proc3)
  gc(reset = T)

}


#### 2 batches
if(
  n.batch == 2
){
  # Batch 1
  d.proc1 <- setNames(
    lapply(
      seq.int(
        1,3,1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][1:3]
    )
  )
  ## output stats
  proc.time()
  d.proc1
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc1,
    file = "processing/2.2.processed.b1.rds"
  )
  # Reset memory
  remove(d.proc1)
  gc(reset = T)

  # Batch 2
  d.proc2 <- setNames(
    lapply(
      seq.int(
        4,6,1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][4:6]
    )
  )
  ## output stats
  proc.time()
  d.proc2
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc2,
    file = "processing/2.2.processed.b2.rds"
  )
  # Reset memory
  remove(d.proc2)
  gc(reset = T)

}


#### 1 batch
if(
  n.batch == 1
){
  # Batch 1
  d.proc1 <- setNames(
    lapply(
      seq.int(
        1,length(
          list.s[["ID"]]
        ),1
      ),
      function(x) {
        # Bin peaks to convert profile to centroid
        d.p <- process(
          peakBin(
            list.d[[x]],
            ref = mz(
              d.peaks
            ),
            type = "height"
          )
        )
        # Return processed sample
        return(d.p)

      }
    ),
    c(
      list.s[["Sample.imzML"]][1:length(
        list.s[["ID"]]
      )]
    )
  )
  ## output stats
  proc.time()
  d.proc1
  getCardinalBPPARAM()
  getCardinalNumBlocks()
  saveRDS(
    d.proc1,
    file = "processing/2.2.processed.b1.rds"
  )
  # Reset memory
  remove(d.proc1)
  gc(reset = T)

}

