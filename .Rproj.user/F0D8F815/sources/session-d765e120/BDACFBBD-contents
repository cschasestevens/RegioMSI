#' Ion images for comparing normalization performance
#'
#' Visualizes a series of ion images comparing various normalization methods for each imaging run.
#'
#' @param df A data matrix containing grouping information and normalized pixel intensities for each annotated compound.
#' @param md.df A data matrix containing pixel metadata for each annotated compound.
#' @param var.int Variable corresponding to the pixel intensity for each sample.
#' @param var.g Sample ID variable.
#' @param perc.int quantile to be used for the intensity color scale to improve contrast in ion images.
#' @return An ion image visualizing pixel intensities to compare normalization performance.
#' @examples
#' # Generate ion images for all annotated compounds
#' parallel::mclapply(
#'   mc.cores = ceiling(
#'     parallel::detectCores()*
#'       0.9
#'   ),
#'   seq.int(
#'     6,
#'     (ncol(l.norm[["norm.sLOESS"]]) + 2),
#'     1
#'   ),
#'   function(x)
#'     ggplot2::ggsave(
#'       paste(
#'         "plot.check.",
#'         names(l.norm[["norm.sLOESS"]][x - 2]),
#'         ".png",
#'         sep = ""),
#'       MSI.image.check(
#'         # Input data
#'         l.norm[["norm.sLOESS"]],
#'         # Input metadata
#'         msi.norm.form[["Pixel"]],
#'         # Intensity to plot
#'         x,
#'         # Sample ID variable
#'         "ID",
#'         # Percentile for scaling contrast of images
#'         0.99
#'       ),
#'       width = 15,
#'       height = 6,
#'       dpi = 1200
#'     )
#' )
#'
#' @export
MSI.image.check <- function(
    df,
    md.df,
    var.int,
    var.g,
    perc.int
  ) {

  d1 <- df
  md1 <- md.df
  d1[is.na(d1[[var.int]])] <- 0

  d1 <- cbind(
    md.df[,c("X","Y")],
    d1
    )

  d2 <- aggregate(
    d1[["X"]],
    list(d1[[var.g]],
         d1[["Y"]]),
    function(z)
      min(z)
  )
  d3 <- aggregate(
    d1[["X"]],
    list(d1[[var.g]],
         d1[["Y"]]),
    function(z)
      max(z)
  )

  d4 <- setNames(
    rbind(
      d2,
      d3[
        sort(d3[["Group.2"]],decreasing = T),
      ],
      d2[1:length(unique(d1[[var.g]])),]
    ),
    c(var.g,"Y","X")
  )

  p1 <- ggplot2::ggplot(
    d1,
    ggplot2::aes(
      x = .data[["X"]],
      y = .data[["Y"]]
    )
  ) +
    ggplot2::geom_raster(
      ggplot2::aes(
        fill = d1[[var.int]]
      ),
      interpolate = T
    ) +
    Regio.theme2() +
    ggplot2::labs(fill = "Intensity") +
    ggplot2::scale_y_reverse(
      limits = c(
        max(d1[["Y"]]
        ),
        1
      )
    ) +
    ggplot2::scale_x_continuous(
      limits = c(
        1,
        max(d1[["Y"]]
        )
      )
    ) +
    # geom_path(
    #   data = d4,
    #   aes(
    #     x = d4[["X"]],
    #     y = d4[["Y"]]
    #     ),
    #   linewidth = 10,
    #   lineend = "round",
    #   linejoin = "round",
    #   color = "white"
    #   ) +
  ggplot2::scale_fill_gradientn(
    colors = Regio.col.grad(),
    limits = c(
      0,
      quantile(d1[[var.int]],
               perc.int
      )
    ),
    na.value = Regio.col.grad()[[12]]
  ) +
    ggplot2::facet_wrap(
      . ~ .data[[var.g]],
      ncol = ceiling(
        length(
          unique(
            d1[[var.g]]
          )
        )/
          2
      )
    )

  return(p1)

}




